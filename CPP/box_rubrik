class BoxStacking {
  private Comparator<int[]> comparator = new Comparator<int[]>() {
    @Override
    public int compare(int[] box1, int[] box2) {
      return box2[1] * box2[2] - box1[1] * box1[2];
    }
  };
  
  public int findTallestStacks(int[][] boxes) {
    Arrays.sort(boxes, comparator);
    
    int[] dp = new int[boxes.length];
    int maxHeight = 0;
    for (int i = 0; i < boxes.length; i++) {
      dp[i] = boxes[i][0];. more info on 1point3acres.com
      for (int j = 0; j < i; j++) {
        if (boxes[j][1] >= boxes[i][1] && boxes[j][2] >= boxes[i][2]) {
          dp[i] = Math.max(dp[i], boxes[i][0] + dp[j]);
        }
      }
      maxHeight = Math.max(maxHeight, dp[i]);
    }
    
    return maxHeight;
  }
}